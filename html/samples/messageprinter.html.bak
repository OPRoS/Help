<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=EUC-KR">
    <title>Sub Topic 2</title>
  </head>
  <body>
    <h2>Create MessagePrinter component with OPRoS Component Editor, an OPRoS
      Tool</h2>
    <ol>
    </ol>
    <ul>
      <li>To compile OPRoS component in this editor, start eclipse with double
        click of OPRoSRun.bat</li>
      <ul>
        <li>OPRoSRun.bat can be generated by double click of OPRoS_CE_Runner.jar</li>
      </ul>
    </ul>
    <ol>
      <li>Click "Compoenent Editor" perspective, refer HelloMaker #1<br>
      </li>
      <li>Check compile condition in "Pereference" refer HelloMaker #2&nbsp; </li>
      <li>Click OPRoS component creating button, refer HelloMaker #3</li>
      <li>Type a project name: MessagePrinter, refer HelloMaker #4 </li>
      <li>Type component name: MessagePrinter, refer HelloMaker #5</li>
      <li>Select compiler: MSVC++, refer HelloMaker #6</li>
      <li>Add a monitoring export variable: <br>
        <img alt="" src="../img/ce_12.JPG" height="214" width="338"><br>
      </li>
      <ul>
        <li>Variable Name: counter&nbsp; Variable Type: int</li>
        <li>Variable name m_counter is generated in MessagePrinter.h<br>
        </li>
      </ul>
      <li>Add a service type: MessagePrint <br>
        <img alt="" src="../img/ce_13.JPG" height="184" width="289"><br>
        <ul>
          <li>Because service port profile was generated during the creation of
            HelloMaker component, in here simply import MessagePrint.xml</li>
        </ul>
      </li>
      <li>Add a service <strong>required</strong> port, refer HelloMaker #9
        <ul>
          <li>Service Port Name: MessagePrint, &nbsp; Service Port
            Type:MessagePrint</li>
        </ul>
      </li>
      <li>Add a data <strong>output</strong> port, refer HelloMaker #10
        <ul>
          <li>Data Port Name: DataIn, &nbsp; Data Port Type: std::string,&nbsp;
            Queue Size: 10</li>
        </ul>
      </li>
      <li>Add a event <strong>output</strong> port, refer HelloMaker #11
        <ul>
          <li>Event Port Name: EventIn, &nbsp; Event Port Type: std::string</li>
        </ul>
      </li>
      <li>Compile to see generated code, refer HelloMaker #12</li>
      <li>Add user code</li>
      <ul>
        <li>MessagePrinter.cpp</li>
      </ul>
      <ul>
        <ul>
          <li>onStart()
            <ol>
              <li><span style="COLOR: rgb(0,0,255)">m_counter</span>=0;&nbsp; //
                initializing the&nbsp;generated monoring variable</li>
            </ol>
          </li>
        </ul>
      </ul>
      <ul>
        <ul>
          <li><span style="COLOR: rgb(0,0,255)">void print(std::string message)</span>&nbsp;
            // providing service by the service port
            <ol>
              <li>std::cout&lt;&lt;"service port print():
                "&lt;&lt;message&lt;&lt;std::endl;</li>
            </ol>
          </li>
        </ul>
      </ul>
      <ul>
        <ul>
          <li>onEvent(Event *evt)
            <ol>
              <li>if( evt-&gt;<span style="COLOR: rgb(0,0,255)">getId</span>().compare("messageId"))
                {&nbsp;&nbsp; // check message id</li>
              <p><em>//Evnet port may get many messages from different component
                  or different reasons.</em></p>
              <p><em>//setId() or getId() is for identification of the event</em></p>
              <li>EventData&lt;std::string&gt; *pStrEvt =
                (EventData&lt;std::string&gt; *)(evt);&nbsp; //
                instanciate&nbsp;event data</li>
              <li>std::cout&lt;&lt;"event port messageId:
                "&lt;&lt;*(pStrEvt-&gt;<span style="COLOR: rgb(0,0,255)">getContentData</span>())&lt;&lt;std::endl;&nbsp;
                }&nbsp;&nbsp; // get event data</li>
            </ol>
          </li>
        </ul>
      </ul>
      <ul>
        <ul>
          <li>onExecute()</li>
          <ol>
            <li>m_counter++;&nbsp; // monitoring export variable periodical
              incrementation</li>
            <li>opros_any *pData = DataIn.<span style="COLOR: rgb(0,0,255)">pop</span>();&nbsp;
              // get a&nbsp;data port data</li>
            <li>
              <p>if(pData&nbsp;!= NULL) {</p>
            </li>
            <li>
              <p>&nbsp;&nbsp;&nbsp; std::cout&lt;&lt;"data port:
                "&lt;&lt;DataIn.<span style="COLOR: rgb(0,0,255)">getContent</span>(*pData)&lt;&lt;std::endl;&nbsp;&nbsp;
                // get data port data</p>
            </li>
            <li>
              <p>&nbsp;&nbsp;&nbsp; delete *pData;&nbsp;&nbsp; }&nbsp; // delete
                the pointer for data<br>
              </p>
            </li>
            <p>&nbsp;&nbsp; // Alway delete the pointer used for the data port</p>
          </ol>
        </ul>
      </ul>
      <li>Compile the component, refer HelloMaker #12</li>
      <li>Copy the component profile in <strong>OPRoS\OprosTools\workspace\MessagePrinter\profile\MessagePrinter.xml</strong>
        and the component binay in <strong> OPRoS\</strong><strong>OprosTools\</strong><strong>workspace\MessagePrinter\Release\MessagePrinter.dll</strong>
        into <strong>OPRoS\OprosDevelopment\Repository|Components </strong> </li>
    </ol>
  </body>
</html>
